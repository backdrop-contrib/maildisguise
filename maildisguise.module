<?php

/**
 * @file
 * Mail disguise main module code.
 */

/**
 * Implements hook_menu().
 */
function maildisguise_menu() {
  $items['admin/config/content/maildisguise_configure'] = array(
    'title' => 'Mail disguise settings',
    'description' => 'Configure Mail disguise site wide settings.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('maildisguise_admin_settings_form'),
    'access arguments' => array('administer maildisguise'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function maildisguise_permission() {
  return array(
    'administer maildisguise' => array(
      'title' => t('Administer Mail Disguise'),
      'description' => t('Set site wide configuration for module Mail Disguise.'),
    ),
  );
}

/**
 * Implements hook_config_info().
 */
function maildisguise_config_info() {
  return array(
    'maildisguise.settings' => array(
      'label' => t('Mail Disguise settings'),
      'group' => t('Configuration'),
    ),
  );
}

/**
 * Custom page callback for site wide settings.
 */
function maildisguise_admin_settings_form($form, &$form_state) {
  $config = config('maildisguise.settings');
  $form['#config'] = 'maildisguise.settings';
  $intro_line1 = t('Site wide css class to use for the wrapper elements of disguised email addresses.');
  $intro_line2 = t("This doesn't have to be a random string, but avoid words like <em>email</em>.");
  $form['introduction'] = array(
    '#type' => 'markup',
    '#markup' => '<p>' . $intro_line1 . '<br />' . $intro_line2 . '</p>',
  );
  $form['css_class'] = array(
    '#type' => 'textfield',
    '#title' => t('CSS class name'),
    '#description' => t('CSS class to use for the span elements wrapping email addresses.'),
    '#default_value' => $config->get('css_class'),
    '#maxlength' => 20,
    '#required' => TRUE,
  );
  // Additional submit handler.
  $form['#submit'][] = 'maildisguise_admin_settings_cache_reset';
  return system_settings_form($form);
}

/**
 * Validation for the admin settings form.
 */
function maildisguise_admin_settings_form_validate($form, &$form_state) {
  $css_class = trim($form_state['values']['css_class']);
  if (strlen($css_class) > 20) {
    form_set_error('css_class', t("The class name shouldn't be longer than 20 characters."));
  }
  if (preg_match('/^[a-zA-Z][a-zA-Z0-9_-]+$/', $css_class) === 0) {
    form_set_error('css_class', t('The input contains characters not allowed in CSS classes.'));
  }
  $form_state['values']['css_class'] = backdrop_clean_css_identifier($css_class);
}

/**
 * Custom callback to flush render caches.
 */
function maildisguise_admin_settings_cache_reset($form, &$form_state) {
  // Field contents need to render again to pick up the new css class.
  cache_flush('field');
  // Other filtered content like blocks.
  cache_flush('filter');
  // Immediate site wide effect.
  cache_flush('page');
}

/**
 * Implements hook_filter_info().
 */
function maildisguise_filter_info() {
  $filters['maildisguise'] = array(
    'title' => t('Mail address disguise'),
    'description' => t('Every email address, link or not, will be hidden from email harvester bots.'),
    'process callback'  => '_maildisguise_process',
    'tips callback' => '_maildisguise_tips',
  );
  return $filters;
}

/**
 * Custom process callback.
 */
function _maildisguise_process($text, $filter, $format) {
  if (empty($text)) {
    return '';
  }
  $css_class = config_get('maildisguise.settings', 'css_class');

  $image = '<span class="' . $css_class . '-image"></span>';
  $dom = new DOMDocument();
  // Ensure utf-8 charset.
  $dom->loadHTML('<!DOCTYPE html><html><head><meta charset="utf-8" /></head><body>' . $text);
  $links = $dom->getElementsByTagName('a');
  foreach ($links as $index => $link) {
    $href = $link->getAttribute('href');
    if (substr($href, 0, 7) == 'mailto:') {
      $css_classes = $link->getAttribute('class');
      $inner_text = $link->nodeValue;
      if (isset($css_classes) && !empty($css_classes)) {
        $css_classes .= ' ' . $css_class;
      }
      else {
        $css_classes = $css_class;
      }
      $link->setAttribute('class', $css_classes);
      $replaced = str_replace(array('mailto:', '@'), array('#', '/at/'), $href);
      $link->setAttribute('href', '');
      $link->setAttribute('data-href', str_rot13($replaced));
      if (strpos($inner_text, '@') !== FALSE) {
        $inner_replaced = str_replace('@', $image, $inner_text);
        $link->nodeValue = '';
        $template = $dom->createDocumentFragment();
        $markup = '<span class="' . $css_class . '-inner">' . $inner_replaced . '</span>';
        $template->appendXML($markup);
        $link->appendChild($template);
      }
    }
  }
  $content = $dom->getElementsByTagName('body')->item(0);
  $body = $dom->saveHTML($content);
  $text = str_replace(array('<body>', '</body>'), '', $body);

  // Now plain text addresses.
  $chunks = explode(' ', $text);
  foreach ($chunks as $index => $chunk) {
    if (preg_match('/[^\s>]+@[^\s<]+/', $chunk, $matches) > 0) {
      $wrapped = '<span class="' . $css_class . '-inner">' . $matches[0] . '</span>';
      $chunks[$index] = str_replace(array($matches[0], '@'), array($wrapped, $image), $chunk);
    }
  }
  $text = implode(' ', $chunks);
  return $text;
}

/**
 * Custom tips callback.
 */
function _maildisguise_tips($filter, $format, $long = FALSE) {
  return t('Email addresses will be disguised in markup to reduce the chances of being harvested by spammers.');
}

/**
 * Implements template_preprocess_page().
 */
function maildisguise_preprocess_page() {
  $css_class = config_get('maildisguise.settings', 'css_class');
  $css = ".{$css_class}-inner span.{$css_class}-image::after {content: '@';}";
  backdrop_add_css($css, 'inline');
  $settings = array(
    'maildisguise' => array(
      'class' => $css_class,
    ),
  );
  backdrop_add_js($settings, 'setting');
}
